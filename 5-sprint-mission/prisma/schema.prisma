generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  description    String
  price          Int
  tags           String[]
  images         String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ProductComment Comment[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  ProductLike    ProductLike[]
}

model Article {
  id             Int           @id @default(autoincrement())
  title          String
  content        String
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  ArticleComment Comment[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  ArticleLike    ArticleLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  articleId Int?
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  nickname     String
  image        String?
  password     String
  refreshToken String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  Product      Product[]
  Article      Article[]
  Comment      Comment[]
  ProductLike  ProductLike[]
  ArticleLike  ArticleLike[]
}

model ProductLike {
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([userId, productId])
}

model ArticleLike {
  userId    Int
  articleId Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
}
