CREATE TABLE "user" (
id SERIAL PRIMARY KEY,
email TEXT UNIQUE NOT NULL,
nickname TEXT NOT NULL,
password TEXT NOT NULL,
createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE product (
id SERIAL PRIMARY KEY,
userId INTEGER REFERENCES "user"(id),
images TEXT,
name VARCHAR(10) NOT NULL,
description TEXT NOT NULL,
price INTEGER NOT NULL,
tags VARCHAR(5)[],
createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE article (
  id SERIAL PRIMARY KEY,
  userId INTEGER REFERENCES "user"(id),
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  images TEXT[],
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comment (
  id SERIAL PRIMARY KEY,
  productId INTEGER REFERENCES product(id),
  articleId INTEGER REFERENCES article(id),
  userId INTEGER REFERENCES "user"(id),
  content TEXT NOT NULL,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  CONSTRAINT check_product_or_article CHECK(
   (productId IS NOT NULL AND articleId is NULL) OR
   (articleId IS NOT NULL AND productId is NULL)
  )
);

CREATE TABLE product_like (
  id SERIAL PRIMARY KEY,
  productId INTEGER REFERENCES product(id),
  userId INTEGER REFERENCES "user"(id),
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  CONSTRAINT unique_product_like UNIQUE (productId, userId)
);

CREATE TABLE article_like (
  id SERIAL PRIMARY KEY,
  articleId INTEGER REFERENCES article(id),
  userId INTEGER REFERENCES "user"(id),
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  CONSTRAINT unique_article_like UNIQUE (articleId, userId)
);

CREATE TABLE REMINDER (
  id SERIAL PRIMARY KEY,
  commentId INTEGER REFERENCES comment(id),
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  isRead BOOLEAN DEFAULT FALSE
);